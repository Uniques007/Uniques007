#include <iostream>
#include <string.h>
#include <math.h>
#include<stdio.h>
using namespace std;



class Task{
    protected:
      char ID[5];

    public:
      Task(char *id){
          strcpy(ID,id);
      }
      virtual int getOrder()=0;
      virtual void print()=0;
    char * getID(){
         return ID;
     }

};
class TimedTask : public Task{
    protected:
       int time;
    public:
       TimedTask(char *ID,int times):Task(ID){
           time=times;
       }

     int getOrder(){
         return time;
     }
     void print(){
         cout<<"TT->"<<ID<<":"<<getOrder()<<endl;
     }


};


class PriorityTask : public Task{
    protected:
       int priority;

    public:
      PriorityTask(char *ID,int priority):Task(ID){
          priority=priority;
      }

    int getOrder(){
        return priority;
    }
    void print(){
        cout<<"PT->"<<ID<<":"<<getOrder()<<endl;
    }

};
bool operator ==(Task *t,Task &t1){
 return ((t->getOrder())==t1.getOrder() && strcmp(t->getID(),t1.getID())==0);

    }


void sort(Task **tasks,int n)
{
    for(int i=0;i<n;i++)
    {
        for(int j=i+1;j<n;j++)
        {
            if(tasks[i]->getOrder() > tasks[j]->getOrder())
            {
                Task *temp=tasks[i];
                tasks[i]=tasks[j];
                tasks[j]=temp;
            }
        }
    }
}

void scheduleTimedTasks (Task ** tasks, int n, int t){
     sort(tasks,n);
     for(int i=0;i<n;i++){
     TimedTask *tim=dynamic_cast<TimedTask*>(tasks[i]);
     if(tim!=0){
         if(tasks[i]->getOrder()<t){
             tasks[i]->print();
         }
     }
     }
}

void  schedulePriorityTasks(Task ** tasks, int n, int p){

    for(int i=0;i<n;i++){
        PriorityTask *pri=dynamic_cast<PriorityTask*>(tasks[i]);
        if(pri!=0){
            if(tasks[i]->getOrder()<p){
                tasks[i]->print();
            }
        }
    }

}






int main ()
{
int testCase;
    int n;
    cin>>testCase;

    if (testCase==0){
        cin>>n;
        Task ** tasks;
        tasks = new Task * [n];
        for (int i=0;i<n;i++){
        char id [5];
        int timeOrPriority;
        int type; //0 za timed, 1 za priority
        cin >> type >>id >> timeOrPriority;
        if (type==0)
            tasks[i] = new TimedTask(id,timeOrPriority);
        else
            tasks[i] = new PriorityTask(id,timeOrPriority);
        //tasks[i]->print();
        }

        cout<<"SCHEDULING PRIORITY TASKS WITH PRIORITY DEGREE LESS THAN 10"<<endl;
        schedulePriorityTasks(tasks,n,10);

    }
    else if (testCase==1) {
        cin>>n;
        Task ** tasks;
        tasks = new Task * [n];
        for (int i=0;i<n;i++){
        char id [5];
        int timeOrPriority;
        int type; //0 za timed, 1 za priority
        cin >> type >>id >> timeOrPriority;
        if (type==0)
            tasks[i] = new TimedTask(id,timeOrPriority);
        else
            tasks[i] = new PriorityTask(id,timeOrPriority);
        //tasks[i]->print();
        }


        cout<<"SCHEDULING TIMED TASKS WITH EXECUTION TIME LESS THAN 50"<<endl;
        scheduleTimedTasks(tasks,n,50);
    }
    else {
        TimedTask * tt1 = new TimedTask("11",10);
        TimedTask * tt2 = new TimedTask("11",11);
        TimedTask * tt3 = new TimedTask("11",11);
        PriorityTask * pp1 = new PriorityTask("aa",10);
        PriorityTask * pp2 = new PriorityTask("11",10);

        cout << (tt1==(*tt2))<<endl;
        cout << (tt2==(*tt3))<<endl;
        cout << (pp1==(*pp2))<<endl;
        cout << (pp2==(*tt1))<<endl;
    }
    return 0;
}
